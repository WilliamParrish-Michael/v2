<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Insurance Benefits Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { 
            margin: 0; 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
        }
        .calculator-container { 
            animation: fadeIn 0.5s ease-in; 
        }
        @keyframes fadeIn { 
            from { opacity: 0; } 
            to { opacity: 1; } 
        }
        .service-card.selected {
            border-color: #3B82F6;
            background-color: #EFF6FF;
        }
    </style>
</head>
<body>
    <div class="min-h-screen bg-gray-50 calculator-container">
        <div class="max-w-6xl mx-auto p-4">
            <!-- Header -->
            <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                <div class="flex items-center justify-between flex-wrap gap-4">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-800 mb-2">Insurance Benefits Calculator</h1>
                        <p class="text-gray-600">Calculate client responsibility for treatment services and negotiate payment options</p>
                    </div>
                    <button onclick="resetCalculator()" class="px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors">
                        Reset Calculator
                    </button>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Input Section -->
                <div class="space-y-6">
                    <!-- Benefits Information -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h2 class="text-lg font-semibold text-gray-800 mb-4">Insurance Benefits</h2>
                        
                        <div class="space-y-4">
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Annual Deductible ($)</label>
                                    <input type="number" id="deductible" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="5000" oninput="calculate()" onchange="calculate()">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Deductible Met ($)</label>
                                    <input type="number" id="deductibleMet" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="1500" oninput="calculate()" onchange="calculate()">
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Out-of-Pocket Max ($)</label>
                                    <input type="number" id="oopMax" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="8000" oninput="calculate()" onchange="calculate()">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">OOP Met ($)</label>
                                    <input type="number" id="oopMet" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="2000" oninput="calculate()" onchange="calculate()">
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Coinsurance (%)</label>
                                    <input type="number" id="coinsurance" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="20" oninput="updateInsurancePortionDirect()" onchange="updateInsurancePortionDirect()" onkeyup="updateInsurancePortionDirect()">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Insurance Portion (%)</label>
                                    <input type="number" id="insurancePortion" class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-600" placeholder="80" readonly>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Treatment Services -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-lg font-semibold text-gray-800">Treatment Services</h2>
                            <button onclick="setDefaultRates()" class="text-sm text-blue-600 hover:text-blue-700 font-medium">
                                Set Default Rates for Selected
                            </button>
                        </div>

                        <div class="space-y-3">
                            <!-- Detox -->
                            <div class="border rounded-lg p-4 service-card cursor-pointer" id="detox-card" onclick="toggleServiceDirect('detox')">
                                <div class="flex items-start">
                                    <input type="checkbox" id="detox-checkbox" class="h-4 w-4 text-blue-600 rounded mt-1" onclick="event.stopPropagation(); toggleServiceDirect('detox')">
                                    <div class="ml-3 flex-1">
                                        <div class="font-medium text-gray-800">Medical Detoxification</div>
                                        <div class="text-sm text-gray-600">Medically supervised withdrawal management</div>
                                    </div>
                                </div>
                                <div class="ml-7 mt-3 grid grid-cols-2 gap-3" id="detox-inputs" style="display: none;">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Daily Rate ($)</label>
                                        <input type="number" id="detox-rate" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" placeholder="2600" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Number of Days</label>
                                        <input type="number" id="detox-days" min="1" value="7" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div class="col-span-2 space-y-2" id="detox-totals"></div>
                                </div>
                            </div>

                            <!-- Residential -->
                            <div class="border rounded-lg p-4 service-card cursor-pointer" id="residential-card" onclick="toggleServiceDirect('residential')">
                                <div class="flex items-start">
                                    <input type="checkbox" id="residential-checkbox" class="h-4 w-4 text-blue-600 rounded mt-1" onclick="event.stopPropagation(); toggleServiceDirect('residential')">
                                    <div class="ml-3 flex-1">
                                        <div class="font-medium text-gray-800">Residential Treatment Center</div>
                                        <div class="text-sm text-gray-600">Inpatient residential treatment program</div>
                                    </div>
                                </div>
                                <div class="ml-7 mt-3 grid grid-cols-2 gap-3" id="residential-inputs" style="display: none;">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Daily Rate ($)</label>
                                        <input type="number" id="residential-rate" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" placeholder="2000" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Number of Days</label>
                                        <input type="number" id="residential-days" min="1" value="21" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div class="col-span-2 space-y-2" id="residential-totals"></div>
                                </div>
                            </div>

                            <!-- PHP -->
                            <div class="border rounded-lg p-4 service-card cursor-pointer" id="php-card" onclick="toggleServiceDirect('php')">
                                <div class="flex items-start">
                                    <input type="checkbox" id="php-checkbox" class="h-4 w-4 text-blue-600 rounded mt-1" onclick="event.stopPropagation(); toggleServiceDirect('php')">
                                    <div class="ml-3 flex-1">
                                        <div class="font-medium text-gray-800">Partial Hospitalization Program</div>
                                        <div class="text-sm text-gray-600">Intensive day treatment program</div>
                                    </div>
                                </div>
                                <div class="ml-7 mt-3 grid grid-cols-2 gap-3" id="php-inputs" style="display: none;">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Daily Rate ($)</label>
                                        <input type="number" id="php-rate" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" placeholder="400" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Number of Days</label>
                                        <input type="number" id="php-days" min="1" value="30" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div class="col-span-2 space-y-2" id="php-totals"></div>
                                </div>
                            </div>

                            <!-- IOP -->
                            <div class="border rounded-lg p-4 service-card cursor-pointer" id="iop-card" onclick="toggleServiceDirect('iop')">
                                <div class="flex items-start">
                                    <input type="checkbox" id="iop-checkbox" class="h-4 w-4 text-blue-600 rounded mt-1" onclick="event.stopPropagation(); toggleServiceDirect('iop')">
                                    <div class="ml-3 flex-1">
                                        <div class="font-medium text-gray-800">Intensive Outpatient Program</div>
                                        <div class="text-sm text-gray-600">Structured outpatient treatment</div>
                                    </div>
                                </div>
                                <div class="ml-7 mt-3 grid grid-cols-2 gap-3" id="iop-inputs" style="display: none;">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Daily Rate ($)</label>
                                        <input type="number" id="iop-rate" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" placeholder="200" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Number of Days</label>
                                        <input type="number" id="iop-days" min="1" value="30" class="w-full px-2 py-1.5 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" onclick="event.stopPropagation()" oninput="calculate()" onchange="calculate()">
                                    </div>
                                    <div class="col-span-2 space-y-2" id="iop-totals"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Results Section -->
                <div id="results-section">
                    <div class="bg-white rounded-lg shadow-sm p-12 text-center">
                        <div class="text-gray-400 mb-4">
                            <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                            </svg>
                        </div>
                        <h3 class="text-lg font-medium text-gray-800 mb-2">No Calculation Yet</h3>
                        <p class="text-gray-600">Enter benefits information and select services to see the cost calculation and payment options</p>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="mt-8 text-center text-sm text-gray-500">
                <p>Free Insurance Benefits Calculator - Streamlined for Treatment Facilities</p>
            </div>
        </div>
    </div>

    <script>
        const serviceDefaults = {
            detox: { rate: 2600, days: 7 },
            residential: { rate: 2000, days: 21 },
            php: { rate: 400, days: 30 },
            iop: { rate: 200, days: 30 }
        };

        function formatNumber(num) {
            return new Intl.NumberFormat().format(Math.round(num));
        }

        function updateInsurancePortion() {
            const coinsuranceValue = document.getElementById('coinsurance').value;
            const coinsurance = parseFloat(coinsuranceValue);
            let insurancePortion = '';
            
            // Only calculate if there's a valid number entered
            if (coinsuranceValue !== '' && !isNaN(coinsurance) && coinsurance >= 0 && coinsurance <= 100) {
                insurancePortion = 100 - coinsurance;
            }
            
            document.getElementById('insurancePortion').value = insurancePortion;
        }

        function toggleServiceDirect(service) {
            var checkbox = document.getElementById(service + '-checkbox');
            var inputs = document.getElementById(service + '-inputs');
            var card = document.getElementById(service + '-card');
            var rateInput = document.getElementById(service + '-rate');
            
            // Toggle the checkbox
            checkbox.checked = !checkbox.checked;
            
            // Show/hide inputs
            if (checkbox.checked) {
                inputs.style.display = 'grid';
                card.classList.add('selected');
                // Auto-fill default rate if empty
                if (!rateInput.value) {
                    rateInput.value = serviceDefaults[service].rate;
                }
            } else {
                inputs.style.display = 'none';
                card.classList.remove('selected');
            }
            
            calculate();
        }

        function handleCheckboxClick(event, service) {
            // Prevent the label click from firing when checkbox is clicked directly
            event.stopPropagation();
            // The checkbox state change will be handled by the browser
            // We just need to update the UI and calculate
            setTimeout(() => {
                const checkbox = document.getElementById(service + '-checkbox');
                const inputs = document.getElementById(service + '-inputs');
                const card = document.getElementById(service + '-card');
                const rateInput = document.getElementById(service + '-rate');
                
                if (checkbox.checked) {
                    inputs.style.display = 'grid';
                    card.classList.add('selected');
                    // Auto-fill default rate if empty
                    if (!rateInput.value) {
                        rateInput.value = serviceDefaults[service].rate;
                    }
                } else {
                    inputs.style.display = 'none';
                    card.classList.remove('selected');
                }
                
                calculate();
            }, 0);
        }

        function setDefaultRates() {
            Object.keys(serviceDefaults).forEach(service => {
                var checkbox = document.getElementById(service + '-checkbox');
                var rateInput = document.getElementById(service + '-rate');
                
                if (checkbox.checked) {
                    rateInput.value = serviceDefaults[service].rate;
                }
            });
            calculate();
        }

        function updateServiceTotals(service) {
            const totalsDiv = document.getElementById(service + '-totals');
            const checkbox = document.getElementById(service + '-checkbox');
            const rate = parseFloat(document.getElementById(service + '-rate').value) || 0;
            const days = parseInt(document.getElementById(service + '-days').value) || 0;
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            
            if (!checkbox.checked || !rate || !days) {
                totalsDiv.innerHTML = '';
                return;
            }
            
            const total = rate * days;
            const deductible = parseFloat(document.getElementById('deductible').value) || 0;
            const deductibleMet = parseFloat(document.getElementById('deductibleMet').value) || 0;
            const remainingDeductible = Math.max(0, deductible - deductibleMet);
            
            let clientDaily, insuranceDaily;
            if (remainingDeductible > 0) {
                clientDaily = rate;
                insuranceDaily = 0;
            } else {
                clientDaily = rate * (coinsurance / 100);
                insuranceDaily = rate * ((100 - coinsurance) / 100);
            }
            
            totalsDiv.innerHTML = `
                <div class="text-center p-2 bg-white rounded border border-blue-200">
                    <span class="text-sm text-gray-600">Service Total: </span>
                    <span class="font-semibold text-blue-600">$${formatNumber(total)}</span>
                </div>
                ${coinsurance ? `
                <div class="grid grid-cols-2 gap-2 text-xs">
                    <div class="text-center p-2 bg-red-50 rounded border border-red-200">
                        <div class="text-red-600 font-medium">Client Daily Rate</div>
                        <div class="font-semibold">$${formatNumber(clientDaily)}</div>
                    </div>
                    <div class="text-center p-2 bg-green-50 rounded border border-green-200">
                        <div class="text-green-600 font-medium">Insurance Daily Rate</div>
                        <div class="font-semibold">$${formatNumber(insuranceDaily)}</div>
                    </div>
                </div>
                ` : ''}
            `;
        }

        function getSelectedServices() {
            const services = [];
            Object.keys(serviceDefaults).forEach(service => {
                const checkbox = document.getElementById(service + '-checkbox');
                const rate = parseFloat(document.getElementById(service + '-rate').value) || 0;
                const days = parseInt(document.getElementById(service + '-days').value) || 0;
                
                if (checkbox.checked && rate && days) {
                    services.push({
                        name: service,
                        rate: rate,
                        days: days,
                        total: rate * days
                    });
                }
            });
            return services;
        }

        function calculate() {
            // Update service totals
            Object.keys(serviceDefaults).forEach(service => {
                updateServiceTotals(service);
            });
            
            const services = getSelectedServices();
            
            if (services.length === 0) {
                showNoCalculation();
                return;
            }
            
            const deductible = parseFloat(document.getElementById('deductible').value) || 0;
            const deductibleMet = parseFloat(document.getElementById('deductibleMet').value) || 0;
            const oopMax = parseFloat(document.getElementById('oopMax').value) || 0;
            const oopMet = parseFloat(document.getElementById('oopMet').value) || 0;
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            
            const totalCharges = services.reduce((sum, service) => sum + service.total, 0);
            const remainingDeductible = Math.max(0, deductible - deductibleMet);
            const remainingOOP = Math.max(0, oopMax - oopMet);
            
            // Calculate client responsibility
            const deductibleApplied = Math.min(totalCharges, remainingDeductible);
            const amountAfterDeductible = Math.max(0, totalCharges - deductibleApplied);
            const coinsuranceAmount = amountAfterDeductible * (coinsurance / 100);
            const totalClientResponsibility = deductibleApplied + coinsuranceAmount;
            const finalClientCost = Math.min(totalClientResponsibility, remainingOOP);
            
            const actualDeductiblePaid = Math.min(deductibleApplied, finalClientCost);
            const actualCoinsurancePaid = Math.max(0, finalClientCost - actualDeductiblePaid);
            const insurancePays = totalCharges - finalClientCost;
            
            const calculation = {
                services: services,
                totalCharges: totalCharges,
                deductibleApplied: actualDeductiblePaid,
                coinsuranceAmount: actualCoinsurancePaid,
                totalClientCost: finalClientCost,
                insurancePays: insurancePays,
                remainingDeductible: Math.max(0, remainingDeductible - actualDeductiblePaid),
                remainingOOP: Math.max(0, remainingOOP - finalClientCost),
                oopMaxReached: finalClientCost < totalClientResponsibility
            };
            
            showResults(calculation);
        }

        function calculateOOPMaxDay(calc) {
            const deductible = parseFloat(document.getElementById('deductible').value) || 0;
            const deductibleMet = parseFloat(document.getElementById('deductibleMet').value) || 0;
            const oopMax = parseFloat(document.getElementById('oopMax').value) || 0;
            const oopMet = parseFloat(document.getElementById('oopMet').value) || 0;
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            
            const remainingOOP = Math.max(0, oopMax - oopMet);
            let remainingDeductible = Math.max(0, deductible - deductibleMet);
            let cumulativeClientCost = 0;
            let currentDay = 0;
            
            // Go through each service day by day
            for (let service of calc.services) {
                for (let day = 1; day <= service.days; day++) {
                    currentDay++;
                    let dailyClientCost;
                    
                    if (remainingDeductible > 0) {
                        // During deductible phase - client pays 100%
                        dailyClientCost = service.rate;
                        remainingDeductible = Math.max(0, remainingDeductible - service.rate);
                    } else {
                        // During coinsurance phase - client pays percentage
                        dailyClientCost = service.rate * (coinsurance / 100);
                    }
                    
                    cumulativeClientCost += dailyClientCost;
                    
                    // Check if we've hit the OOP max
                    if (cumulativeClientCost >= remainingOOP) {
                        return currentDay;
                    }
                }
            }
            
            return currentDay; // If somehow we get here
        }
            const deductible = parseFloat(document.getElementById('deductible').value) || 0;
            const deductibleMet = parseFloat(document.getElementById('deductibleMet').value) || 0;
            const oopMax = parseFloat(document.getElementById('oopMax').value) || 0;
            const oopMet = parseFloat(document.getElementById('oopMet').value) || 0;
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            
            const remainingOOP = Math.max(0, oopMax - oopMet);
            const remainingDeductible = Math.max(0, deductible - deductibleMet);
            
            if (remainingOOP <= 0) {
                return `
                    <div class="text-center">
                        <div class="text-3xl font-bold text-green-600 mb-2">0 Days</div>
                        <p class="text-green-700 text-sm">Out-of-pocket maximum already reached - Insurance pays 100%!</p>
                    </div>
                `;
            }
            
            // Calculate weighted average daily rate across all selected services
            let totalServiceCost = 0;
            let totalDays = 0;
            
            calc.services.forEach(service => {
                totalServiceCost += service.total;
                totalDays += service.days;
            });
            
            const avgDailyRate = totalServiceCost / totalDays;
            
            // Calculate days needed to reach OOP max
            let daysNeeded = 0;
            let runningOOPUsed = 0;
            let currentRemainingDeductible = remainingDeductible;
            
            // Phase 1: Days during deductible (client pays 100%)
            if (currentRemainingDeductible > 0) {
                const deductibleDays = Math.ceil(currentRemainingDeductible / avgDailyRate);
                const deductibleCost = deductibleDays * avgDailyRate;
                
                if (deductibleCost >= remainingOOP) {
                    // Will reach OOP max during deductible phase
                    daysNeeded = Math.ceil(remainingOOP / avgDailyRate);
                } else {
                    // Need to continue past deductible into coinsurance
                    daysNeeded += deductibleDays;
                    runningOOPUsed += Math.min(deductibleCost, currentRemainingDeductible);
                    currentRemainingDeductible = 0;
                    
                    // Phase 2: Days during coinsurance (client pays %)
                    const remainingOOPAfterDeductible = remainingOOP - runningOOPUsed;
                    const clientCoinsuranceRate = coinsurance / 100;
                    const dailyClientCostInCoinsurance = avgDailyRate * clientCoinsuranceRate;
                    
                    if (dailyClientCostInCoinsurance > 0) {
                        const coinsuranceDays = Math.ceil(remainingOOPAfterDeductible / dailyClientCostInCoinsurance);
                        daysNeeded += coinsuranceDays;
                    }
                }
            } else {
                // Already past deductible, only coinsurance applies
                const clientCoinsuranceRate = coinsurance / 100;
                const dailyClientCostInCoinsurance = avgDailyRate * clientCoinsuranceRate;
                
                if (dailyClientCostInCoinsurance > 0) {
                    daysNeeded = Math.ceil(remainingOOP / dailyClientCostInCoinsurance);
                }
            }
            
            // Calculate daily rates for different phases
            const dailyDeductibleCost = avgDailyRate;
            const dailyCoinsuranceCost = avgDailyRate * (coinsurance / 100);
            
            return `
                <div class="text-center mb-4">
                    <div class="text-3xl font-bold text-purple-600 mb-2">${daysNeeded} Days</div>
                    <p class="text-purple-700 text-sm">Until client pays 0% and insurance covers 100% of treatment costs</p>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                    <div class="bg-white/60 rounded p-3 text-center">
                        <div class="text-purple-600 font-medium text-sm">Remaining OOP Maximum</div>
                        <div class="text-lg font-bold text-purple-800">${formatNumber(remainingOOP)}</div>
                    </div>
                    <div class="bg-white/60 rounded p-3 text-center">
                        <div class="text-purple-600 font-medium text-sm">Average Daily Rate</div>
                        <div class="text-lg font-bold text-purple-800">${formatNumber(avgDailyRate)}</div>
                    </div>
                    <div class="bg-white/60 rounded p-3 text-center">
                        <div class="text-purple-600 font-medium text-sm">Current Phase</div>
                        <div class="text-lg font-bold text-purple-800">${currentRemainingDeductible > 0 ? 'Deductible' : 'Coinsurance'}</div>
                    </div>
                </div>
                
                <div class="mt-4 space-y-2 text-sm">
                    <div class="bg-white/60 rounded p-3">
                        <div class="font-medium text-purple-700 mb-2">Daily Client Cost by Phase:</div>
                        <div class="grid grid-cols-2 gap-2 text-xs">
                            <div>
                                <span class="text-red-600">• Deductible Phase:</span> ${formatNumber(dailyDeductibleCost)}/day (100%)
                            </div>
                            <div>
                                <span class="text-orange-600">• Coinsurance Phase:</span> ${formatNumber(dailyCoinsuranceCost)}/day (${coinsurance}%)
                            </div>
                        </div>
                        <div class="mt-2 text-green-600 font-medium">
                            • After ${daysNeeded} days: $0/day (0% - Insurance pays 100%)
                        </div>
                    </div>
                </div>
                
                <div class="mt-4 text-center p-3 bg-green-50 rounded border border-green-200">
                    <div class="text-sm text-green-700">
                        <strong>Goal:</strong> After ${daysNeeded} more days of treatment, all covered services will be FREE for the rest of the year!
                    </div>
                </div>
            `;
        }

        function generateServiceBreakdown(calc) {
            const deductible = parseFloat(document.getElementById('deductible').value) || 0;
            const deductibleMet = parseFloat(document.getElementById('deductibleMet').value) || 0;
            const oopMax = parseFloat(document.getElementById('oopMax').value) || 0;
            const oopMet = parseFloat(document.getElementById('oopMet').value) || 0;
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            
            let remainingDeductible = Math.max(0, deductible - deductibleMet);
            let remainingOOP = Math.max(0, oopMax - oopMet);
            let runningClientTotal = 0;
            let runningInsuranceTotal = 0;
            
            const serviceNames = {
                detox: 'Medical Detoxification',
                residential: 'Residential Treatment',
                php: 'Partial Hospitalization',
                iop: 'Intensive Outpatient'
            };
            
            let breakdown = '<div class="space-y-4">';
            
            // Header
            breakdown += `
                <div class="text-center mb-4">
                    <div class="text-lg font-bold text-orange-600 mb-2">Service-by-Service Calculation</div>
                    <p class="text-orange-700 text-sm">How client responsibility is calculated across multiple treatment levels</p>
                </div>
            `;
            
            calc.services.forEach((service, index) => {
                const serviceName = serviceNames[service.name] || service.name;
                const serviceTotal = service.total;
                
                // Calculate this service's client responsibility
                let deductibleForThisService = Math.min(serviceTotal, remainingDeductible);
                let amountAfterDeductible = Math.max(0, serviceTotal - deductibleForThisService);
                let coinsuranceForThisService = amountAfterDeductible * (coinsurance / 100);
                let totalServiceResponsibility = deductibleForThisService + coinsuranceForThisService;
                
                // Apply OOP cap
                let actualServiceResponsibility = Math.min(totalServiceResponsibility, remainingOOP);
                let serviceInsurancePays = serviceTotal - actualServiceResponsibility;
                
                // Update running totals
                runningClientTotal += actualServiceResponsibility;
                runningInsuranceTotal += serviceInsurancePays;
                
                // Update remaining amounts
                remainingDeductible = Math.max(0, remainingDeductible - deductibleForThisService);
                remainingOOP = Math.max(0, remainingOOP - actualServiceResponsibility);
                
                const isDeductiblePhase = deductibleForThisService > 0;
                const isCoinsurancePhase = coinsuranceForThisService > 0;
                const isOOPCapped = actualServiceResponsibility < totalServiceResponsibility;
                
                breakdown += `
                    <div class="bg-white/60 rounded-lg p-4 border border-orange-200">
                        <div class="flex justify-between items-center mb-3">
                            <div>
                                <div class="font-semibold text-gray-800">${serviceName}</div>
                                <div class="text-sm text-gray-600">${service.days} days @ ${formatNumber(service.rate)}/day</div>
                            </div>
                            <div class="text-right">
                                <div class="text-lg font-bold text-orange-600">${formatNumber(serviceTotal)}</div>
                                <div class="text-xs text-gray-600">Total Cost</div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-3 text-sm">
                            <div class="bg-red-50 rounded p-3 border border-red-200">
                                <div class="font-medium text-red-700 mb-2">Client Pays</div>
                                ${isDeductiblePhase ? `<div class="text-xs">• Deductible: ${formatNumber(deductibleForThisService)}</div>` : ''}
                                ${isCoinsurancePhase ? `<div class="text-xs">• Coinsurance (${coinsurance}%): ${formatNumber(coinsuranceForThisService)}</div>` : ''}
                                ${isOOPCapped ? `<div class="text-xs text-orange-600">• Capped by OOP Max</div>` : ''}
                                <div class="font-bold text-red-800 mt-1">${formatNumber(actualServiceResponsibility)}</div>
                            </div>
                            
                            <div class="bg-green-50 rounded p-3 border border-green-200">
                                <div class="font-medium text-green-700 mb-2">Insurance Pays</div>
                                <div class="text-xs">• Coverage: ${isDeductiblePhase ? '0%' : `${100 - coinsurance}%`} of allowed</div>
                                ${isOOPCapped ? `<div class="text-xs text-green-600">• Plus OOP excess</div>` : ''}
                                <div class="font-bold text-green-800 mt-1">${formatNumber(serviceInsurancePays)}</div>
                            </div>
                        </div>
                        
                        <div class="mt-3 pt-3 border-t border-orange-200">
                            <div class="grid grid-cols-3 gap-2 text-xs">
                                <div class="text-center">
                                    <div class="text-gray-600">Remaining Deductible</div>
                                    <div class="font-semibold">${remainingDeductible > 0 ? '

        function showNoCalculation() {
            document.getElementById('results-section').innerHTML = `
                <div class="bg-white rounded-lg shadow-sm p-12 text-center">
                    <div class="text-gray-400 mb-4">
                        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-800 mb-2">No Calculation Yet</h3>
                    <p class="text-gray-600">Enter benefits information and select services to see the cost calculation and payment options</p>
                </div>
            `;
        }

        function showResults(calc) {
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            const oopMaxDay = calc.oopMaxReached ? calculateOOPMaxDay(calc) : null;
            
            document.getElementById('results-section').innerHTML = `
                <div class="space-y-6">
                    <!-- Insurance Rules -->
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="text-sm text-gray-700 space-y-1">
                            <div>• Until Deductible: Client pays 100%</div>
                            <div>• After Deductible: Client pays coinsurance ${coinsurance || '[enter %]'}%</div>
                            <div>• After OOP Max: Insurance pays 100%</div>
                        </div>
                    </div>

                    <!-- Main Result -->
                    <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg shadow-sm p-6 text-white">
                        <h3 class="text-lg font-semibold mb-4">Client Responsibility</h3>
                        <div class="text-center mb-6">
                            <div class="text-5xl font-bold mb-2">$${formatNumber(calc.totalClientCost)}</div>
                            <p class="text-blue-100">Total amount client will pay</p>
                            ${calc.oopMaxReached ? `<div class="mt-3 bg-white/20 rounded-lg px-4 py-2 text-sm"><span class="font-semibold">✓ OOP Max Reached</span> - Capped at remaining maximum<br><span class="text-blue-200">Reached on day ${oopMaxDay} of treatment</span></div>` : ''}
                        </div>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div class="bg-white/10 rounded p-3">
                                <div class="text-blue-100">Insurance Pays</div>
                                <div class="text-xl font-semibold">$${formatNumber(calc.insurancePays)}</div>
                            </div>
                            <div class="bg-white/10 rounded p-3">
                                <div class="text-blue-100">Total Charges</div>
                                <div class="text-xl font-semibold">$${formatNumber(calc.totalCharges)}</div>
                            </div>
                        </div>
                    </div>

                    ${calc.services.length > 0 && calc.remainingOOP > 0 ? `
                    <!-- Days Until 100% Insurance Coverage -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Days Until 0% Client Responsibility</h4>
                        <div class="bg-gradient-to-r from-blue-100 to-purple-100 rounded-lg p-4">
                            ${generateDaysTo100Coverage(calc)}
                        </div>
                    </div>
                    ` : ''}

                    ${calc.services.length > 0 ? `
                    <!-- Client Responsibility Breakdown -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Client Responsibility Calculation by Service</h4>
                        <div class="bg-gradient-to-r from-orange-100 to-red-100 rounded-lg p-4">
                            ${generateServiceBreakdown(calc)}
                        </div>
                    </div>
                    ` : ''}

                    <!-- Payment Options -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Payment Collection Options</h4>
                        <div class="bg-blue-50 p-4 rounded-lg mb-4">
                            <p class="text-sm text-blue-800"><strong>Purpose:</strong> Help clients access treatment when they cannot afford the full amount upfront.</p>
                        </div>
                        
                        <div class="space-y-4">
                            <!-- Option 1: Deductible Only -->
                            <div class="border-2 border-gray-200 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm font-semibold mb-2">Option 1 - Minimum</span>
                                        <h5 class="font-semibold text-gray-800">Pay Deductible Portion Only</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-gray-800">$${formatNumber(calc.deductibleApplied)}</div>
                                </div>
                                <div class="bg-gray-50 p-3 rounded text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.deductibleApplied)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost - calc.deductibleApplied)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.deductibleApplied + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 2: 50% -->
                            <div class="border-2 border-blue-200 rounded-lg p-4 bg-blue-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-semibold mb-2">Option 2 - Partial</span>
                                        <h5 class="font-semibold text-gray-800">Pay 50% of Client Responsibility</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-blue-700">$${formatNumber(calc.totalClientCost * 0.5)}</div>
                                </div>
                                <div class="bg-blue-50 p-3 rounded border border-blue-200 text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.totalClientCost * 0.5)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost * 0.5)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.totalClientCost * 0.5 + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 3: Full -->
                            <div class="border-2 border-green-200 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-semibold mb-2">Option 3 - Full Payment</span>
                                        <h5 class="font-semibold text-gray-800">Pay Full Client Responsibility</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-green-700">$${formatNumber(calc.totalClientCost)}</div>
                                </div>
                                <div class="bg-green-50 p-3 rounded border border-green-200 text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.totalClientCost)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $0</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.totalCharges)}</div>
                                </div>
                                <div class="bg-white p-3 rounded border border-green-300 mt-2 text-center">
                                    <div class="text-lg font-bold text-green-700">✓ Paid in Full</div>
                                    <div class="text-xs text-green-600">No future billing required</div>
                                </div>
                            </div>

                            <!-- Option 4: $1000 -->
                            <div class="border-2 border-purple-200 rounded-lg p-4 bg-purple-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-semibold mb-2">Option 4 - Hardship</span>
                                        <h5 class="font-semibold text-gray-800">Minimum Viable Payment</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-purple-700">$1,000</div>
                                </div>
                                <div class="bg-purple-50 p-3 rounded border border-purple-200 text-xs space-y-1">
                                    <div>• Client pays now: $1,000</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost - 1000)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(1000 + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 5: $0 -->
                            <div class="border-2 border-red-200 rounded-lg p-4 bg-red-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm font-semibold mb-2">Option 5 - Emergency</span>
                                        <h5 class="font-semibold text-gray-800">Collect Nothing Upfront</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-red-700">$0</div>
                                </div>
                                <div class="bg-red-50 p-3 rounded border border-red-200 text-xs space-y-1">
                                    <div>• Client pays now: $0</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.insurancePays)}</div>
                                </div>
                                <div class="bg-white p-3 rounded border border-red-300 mt-2 text-center">
                                    <div class="text-lg font-bold text-red-700">⚠️ High Risk</div>
                                    <div class="text-xs text-red-600">Requires authorization and collection plan</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Summary -->
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6">
                        <h4 class="text-lg font-semibold text-green-800 mb-4">Collection Summary</h4>
                        <div class="grid grid-cols-2 gap-4">
                            <div class="bg-white rounded-lg p-4 border border-green-300">
                                <div class="text-green-800 font-semibold">Total Client Responsibility</div>
                                <div class="text-2xl font-bold text-green-700">$${formatNumber(calc.totalClientCost)}</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-green-300">
                                <div class="text-green-800 font-semibold">Insurance Will Pay</div>
                                <div class="text-xl font-bold text-green-700">$${formatNumber(calc.insurancePays)}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function resetCalculator() {
            // Reset all benefit inputs
            document.getElementById('deductible').value = '';
            document.getElementById('deductibleMet').value = '';
            document.getElementById('oopMax').value = '';
            document.getElementById('oopMet').value = '';
            document.getElementById('coinsurance').value = '';
            document.getElementById('insurancePortion').value = '';
            
            // Reset all services
            Object.keys(serviceDefaults).forEach(service => {
                var checkbox = document.getElementById(service + '-checkbox');
                var inputs = document.getElementById(service + '-inputs');
                var card = document.getElementById(service + '-card');
                var rate = document.getElementById(service + '-rate');
                var days = document.getElementById(service + '-days');
                
                checkbox.checked = false;
                inputs.style.display = 'none';
                card.classList.remove('selected');
                rate.value = '';
                days.value = serviceDefaults[service].days;
            });
            
            showNoCalculation();
        }

        // Initialize when page loads
        function initCalculator() {
            showNoCalculation();
            updateInsurancePortionDirect();
        }

        // Initialize immediately
        initCalculator();
    </script>
</body>
</html> + formatNumber(remainingDeductible) : 'Satisfied'}</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-gray-600">Remaining OOP</div>
                                    <div class="font-semibold">${remainingOOP > 0 ? '

        function showNoCalculation() {
            document.getElementById('results-section').innerHTML = `
                <div class="bg-white rounded-lg shadow-sm p-12 text-center">
                    <div class="text-gray-400 mb-4">
                        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-800 mb-2">No Calculation Yet</h3>
                    <p class="text-gray-600">Enter benefits information and select services to see the cost calculation and payment options</p>
                </div>
            `;
        }

        function showResults(calc) {
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            const daysToOOP = calculateDaysToOOP(calc);
            const avgDailyClientCost = calc.remainingDeductible > 0 ? 
                (calc.totalCharges / calc.services.reduce((sum, s) => sum + s.days, 0)) :
                (calc.totalCharges / calc.services.reduce((sum, s) => sum + s.days, 0)) * (coinsurance / 100);
            
            document.getElementById('results-section').innerHTML = `
                <div class="space-y-6">
                    <!-- Insurance Rules -->
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="text-sm text-gray-700 space-y-1">
                            <div>• Until Deductible: Client pays 100%</div>
                            <div>• After Deductible: Client pays coinsurance ${coinsurance || '[enter %]'}%</div>
                            <div>• After OOP Max: Insurance pays 100%</div>
                        </div>
                    </div>

                    <!-- Main Result -->
                    <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg shadow-sm p-6 text-white">
                        <h3 class="text-lg font-semibold mb-4">Client Responsibility</h3>
                        <div class="text-center mb-6">
                            <div class="text-5xl font-bold mb-2">$${formatNumber(calc.totalClientCost)}</div>
                            <p class="text-blue-100">Total amount client will pay</p>
                            ${calc.oopMaxReached ? '<div class="mt-3 bg-white/20 rounded-lg px-4 py-2 text-sm"><span class="font-semibold">✓ OOP Max Reached</span> - Capped at remaining maximum</div>' : ''}
                        </div>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div class="bg-white/10 rounded p-3">
                                <div class="text-blue-100">Insurance Pays</div>
                                <div class="text-xl font-semibold">$${formatNumber(calc.insurancePays)}</div>
                            </div>
                            <div class="bg-white/10 rounded p-3">
                                <div class="text-blue-100">Total Charges</div>
                                <div class="text-xl font-semibold">$${formatNumber(calc.totalCharges)}</div>
                            </div>
                        </div>
                    </div>

                    ${calc.services.length > 0 ? `
                    <!-- Client Responsibility Breakdown -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Client Responsibility Calculation by Service</h4>
                        <div class="bg-gradient-to-r from-orange-100 to-red-100 rounded-lg p-4">
                            ${generateServiceBreakdown(calc)}
                        </div>
                    </div>
                    ` : ''}

                    <!-- Payment Options -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Payment Collection Options</h4>
                        <div class="bg-blue-50 p-4 rounded-lg mb-4">
                            <p class="text-sm text-blue-800"><strong>Purpose:</strong> Help clients access treatment when they cannot afford the full amount upfront.</p>
                        </div>
                        
                        <div class="space-y-4">
                            <!-- Option 1: Deductible Only -->
                            <div class="border-2 border-gray-200 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm font-semibold mb-2">Option 1 - Minimum</span>
                                        <h5 class="font-semibold text-gray-800">Pay Deductible Portion Only</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-gray-800">$${formatNumber(calc.deductibleApplied)}</div>
                                </div>
                                <div class="bg-gray-50 p-3 rounded text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.deductibleApplied)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost - calc.deductibleApplied)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.deductibleApplied + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 2: 50% -->
                            <div class="border-2 border-blue-200 rounded-lg p-4 bg-blue-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-semibold mb-2">Option 2 - Partial</span>
                                        <h5 class="font-semibold text-gray-800">Pay 50% of Client Responsibility</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-blue-700">$${formatNumber(calc.totalClientCost * 0.5)}</div>
                                </div>
                                <div class="bg-blue-50 p-3 rounded border border-blue-200 text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.totalClientCost * 0.5)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost * 0.5)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.totalClientCost * 0.5 + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 3: Full -->
                            <div class="border-2 border-green-200 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-semibold mb-2">Option 3 - Full Payment</span>
                                        <h5 class="font-semibold text-gray-800">Pay Full Client Responsibility</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-green-700">$${formatNumber(calc.totalClientCost)}</div>
                                </div>
                                <div class="bg-green-50 p-3 rounded border border-green-200 text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.totalClientCost)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $0</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.totalCharges)}</div>
                                </div>
                                <div class="bg-white p-3 rounded border border-green-300 mt-2 text-center">
                                    <div class="text-lg font-bold text-green-700">✓ Paid in Full</div>
                                    <div class="text-xs text-green-600">No future billing required</div>
                                </div>
                            </div>

                            <!-- Option 4: $1000 -->
                            <div class="border-2 border-purple-200 rounded-lg p-4 bg-purple-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-semibold mb-2">Option 4 - Hardship</span>
                                        <h5 class="font-semibold text-gray-800">Minimum Viable Payment</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-purple-700">$1,000</div>
                                </div>
                                <div class="bg-purple-50 p-3 rounded border border-purple-200 text-xs space-y-1">
                                    <div>• Client pays now: $1,000</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost - 1000)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(1000 + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 5: $0 -->
                            <div class="border-2 border-red-200 rounded-lg p-4 bg-red-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm font-semibold mb-2">Option 5 - Emergency</span>
                                        <h5 class="font-semibold text-gray-800">Collect Nothing Upfront</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-red-700">$0</div>
                                </div>
                                <div class="bg-red-50 p-3 rounded border border-red-200 text-xs space-y-1">
                                    <div>• Client pays now: $0</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.insurancePays)}</div>
                                </div>
                                <div class="bg-white p-3 rounded border border-red-300 mt-2 text-center">
                                    <div class="text-lg font-bold text-red-700">⚠️ High Risk</div>
                                    <div class="text-xs text-red-600">Requires authorization and collection plan</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Summary -->
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6">
                        <h4 class="text-lg font-semibold text-green-800 mb-4">Collection Summary</h4>
                        <div class="grid grid-cols-2 gap-4">
                            <div class="bg-white rounded-lg p-4 border border-green-300">
                                <div class="text-green-800 font-semibold">Total Client Responsibility</div>
                                <div class="text-2xl font-bold text-green-700">$${formatNumber(calc.totalClientCost)}</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-green-300">
                                <div class="text-green-800 font-semibold">Insurance Will Pay</div>
                                <div class="text-xl font-bold text-green-700">$${formatNumber(calc.insurancePays)}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function resetCalculator() {
            // Reset all inputs
            document.getElementById('deductible').value = '';
            document.getElementById('deductibleMet').value = '';
            document.getElementById('oopMax').value = '';
            document.getElementById('oopMet').value = '';
            document.getElementById('coinsurance').value = '';
            document.getElementById('insurancePortion').value = '';
            
            // Reset all services
            Object.keys(serviceDefaults).forEach(service => {
                const checkbox = document.getElementById(service + '-checkbox');
                const inputs = document.getElementById(service + '-inputs');
                const card = document.getElementById(service + '-card');
                const rate = document.getElementById(service + '-rate');
                const days = document.getElementById(service + '-days');
                
                checkbox.checked = false;
                inputs.style.display = 'none';
                card.classList.remove('selected');
                rate.value = '';
                days.value = serviceDefaults[service].days;
            });
            
            showNoCalculation();
        }

        // Initialize
        showNoCalculation();
    </script>
</body>
</html> + formatNumber(remainingOOP) : 'Reached'}</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-gray-600">Phase</div>
                                    <div class="font-semibold">${remainingDeductible > 0 ? 'Deductible' : remainingOOP > 0 ? 'Coinsurance' : '100% Coverage'}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            // Running totals
            breakdown += `
                <div class="bg-white rounded-lg p-4 border-2 border-orange-300">
                    <div class="text-center mb-3">
                        <div class="text-lg font-bold text-orange-600">Final Totals</div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="text-center p-3 bg-red-50 rounded border border-red-200">
                            <div class="text-red-600 font-medium">Total Client Responsibility</div>
                            <div class="text-2xl font-bold text-red-800">${formatNumber(runningClientTotal)}</div>
                        </div>
                        <div class="text-center p-3 bg-green-50 rounded border border-green-200">
                            <div class="text-green-600 font-medium">Total Insurance Coverage</div>
                            <div class="text-2xl font-bold text-green-800">${formatNumber(runningInsuranceTotal)}</div>
                        </div>
                    </div>
                    <div class="mt-3 text-center text-sm text-gray-600">
                        Combined treatment cost: ${formatNumber(calc.totalCharges)}
                    </div>
                </div>
            `;
            
            breakdown += '</div>';
            return breakdown;
        }

        function showNoCalculation() {
            document.getElementById('results-section').innerHTML = `
                <div class="bg-white rounded-lg shadow-sm p-12 text-center">
                    <div class="text-gray-400 mb-4">
                        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-800 mb-2">No Calculation Yet</h3>
                    <p class="text-gray-600">Enter benefits information and select services to see the cost calculation and payment options</p>
                </div>
            `;
        }

        function showResults(calc) {
            const coinsurance = parseFloat(document.getElementById('coinsurance').value) || 0;
            const daysToOOP = calculateDaysToOOP(calc);
            const avgDailyClientCost = calc.remainingDeductible > 0 ? 
                (calc.totalCharges / calc.services.reduce((sum, s) => sum + s.days, 0)) :
                (calc.totalCharges / calc.services.reduce((sum, s) => sum + s.days, 0)) * (coinsurance / 100);
            
            document.getElementById('results-section').innerHTML = `
                <div class="space-y-6">
                    <!-- Insurance Rules -->
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="text-sm text-gray-700 space-y-1">
                            <div>• Until Deductible: Client pays 100%</div>
                            <div>• After Deductible: Client pays coinsurance ${coinsurance || '[enter %]'}%</div>
                            <div>• After OOP Max: Insurance pays 100%</div>
                        </div>
                    </div>

                    <!-- Main Result -->
                    <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg shadow-sm p-6 text-white">
                        <h3 class="text-lg font-semibold mb-4">Client Responsibility</h3>
                        <div class="text-center mb-6">
                            <div class="text-5xl font-bold mb-2">$${formatNumber(calc.totalClientCost)}</div>
                            <p class="text-blue-100">Total amount client will pay</p>
                            ${calc.oopMaxReached ? '<div class="mt-3 bg-white/20 rounded-lg px-4 py-2 text-sm"><span class="font-semibold">✓ OOP Max Reached</span> - Capped at remaining maximum</div>' : ''}
                        </div>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div class="bg-white/10 rounded p-3">
                                <div class="text-blue-100">Insurance Pays</div>
                                <div class="text-xl font-semibold">$${formatNumber(calc.insurancePays)}</div>
                            </div>
                            <div class="bg-white/10 rounded p-3">
                                <div class="text-blue-100">Total Charges</div>
                                <div class="text-xl font-semibold">$${formatNumber(calc.totalCharges)}</div>
                            </div>
                        </div>
                    </div>

                    ${calc.services.length > 0 ? `
                    <!-- Client Responsibility Breakdown -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Client Responsibility Calculation by Service</h4>
                        <div class="bg-gradient-to-r from-orange-100 to-red-100 rounded-lg p-4">
                            ${generateServiceBreakdown(calc)}
                        </div>
                    </div>
                    ` : ''}

                    <!-- Payment Options -->
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h4 class="text-lg font-semibold text-gray-800 mb-4">Payment Collection Options</h4>
                        <div class="bg-blue-50 p-4 rounded-lg mb-4">
                            <p class="text-sm text-blue-800"><strong>Purpose:</strong> Help clients access treatment when they cannot afford the full amount upfront.</p>
                        </div>
                        
                        <div class="space-y-4">
                            <!-- Option 1: Deductible Only -->
                            <div class="border-2 border-gray-200 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm font-semibold mb-2">Option 1 - Minimum</span>
                                        <h5 class="font-semibold text-gray-800">Pay Deductible Portion Only</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-gray-800">$${formatNumber(calc.deductibleApplied)}</div>
                                </div>
                                <div class="bg-gray-50 p-3 rounded text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.deductibleApplied)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost - calc.deductibleApplied)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.deductibleApplied + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 2: 50% -->
                            <div class="border-2 border-blue-200 rounded-lg p-4 bg-blue-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-semibold mb-2">Option 2 - Partial</span>
                                        <h5 class="font-semibold text-gray-800">Pay 50% of Client Responsibility</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-blue-700">$${formatNumber(calc.totalClientCost * 0.5)}</div>
                                </div>
                                <div class="bg-blue-50 p-3 rounded border border-blue-200 text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.totalClientCost * 0.5)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost * 0.5)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.totalClientCost * 0.5 + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 3: Full -->
                            <div class="border-2 border-green-200 rounded-lg p-4">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-semibold mb-2">Option 3 - Full Payment</span>
                                        <h5 class="font-semibold text-gray-800">Pay Full Client Responsibility</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-green-700">$${formatNumber(calc.totalClientCost)}</div>
                                </div>
                                <div class="bg-green-50 p-3 rounded border border-green-200 text-xs space-y-1">
                                    <div>• Client pays now: $${formatNumber(calc.totalClientCost)}</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $0</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.totalCharges)}</div>
                                </div>
                                <div class="bg-white p-3 rounded border border-green-300 mt-2 text-center">
                                    <div class="text-lg font-bold text-green-700">✓ Paid in Full</div>
                                    <div class="text-xs text-green-600">No future billing required</div>
                                </div>
                            </div>

                            <!-- Option 4: $1000 -->
                            <div class="border-2 border-purple-200 rounded-lg p-4 bg-purple-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-semibold mb-2">Option 4 - Hardship</span>
                                        <h5 class="font-semibold text-gray-800">Minimum Viable Payment</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-purple-700">$1,000</div>
                                </div>
                                <div class="bg-purple-50 p-3 rounded border border-purple-200 text-xs space-y-1">
                                    <div>• Client pays now: $1,000</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost - 1000)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(1000 + calc.insurancePays)}</div>
                                </div>
                            </div>

                            <!-- Option 5: $0 -->
                            <div class="border-2 border-red-200 rounded-lg p-4 bg-red-50">
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <span class="inline-block px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm font-semibold mb-2">Option 5 - Emergency</span>
                                        <h5 class="font-semibold text-gray-800">Collect Nothing Upfront</h5>
                                    </div>
                                    <div class="text-2xl font-bold text-red-700">$0</div>
                                </div>
                                <div class="bg-red-50 p-3 rounded border border-red-200 text-xs space-y-1">
                                    <div>• Client pays now: $0</div>
                                    <div>• Insurance pays: $${formatNumber(calc.insurancePays)}</div>
                                    <div>• Remaining balance: $${formatNumber(calc.totalClientCost)}</div>
                                    <div class="font-semibold pt-1 border-t">Total Coverage: $${formatNumber(calc.insurancePays)}</div>
                                </div>
                                <div class="bg-white p-3 rounded border border-red-300 mt-2 text-center">
                                    <div class="text-lg font-bold text-red-700">⚠️ High Risk</div>
                                    <div class="text-xs text-red-600">Requires authorization and collection plan</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Summary -->
                    <div class="bg-green-50 border border-green-200 rounded-lg p-6">
                        <h4 class="text-lg font-semibold text-green-800 mb-4">Collection Summary</h4>
                        <div class="grid grid-cols-2 gap-4">
                            <div class="bg-white rounded-lg p-4 border border-green-300">
                                <div class="text-green-800 font-semibold">Total Client Responsibility</div>
                                <div class="text-2xl font-bold text-green-700">$${formatNumber(calc.totalClientCost)}</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-green-300">
                                <div class="text-green-800 font-semibold">Insurance Will Pay</div>
                                <div class="text-xl font-bold text-green-700">$${formatNumber(calc.insurancePays)}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function resetCalculator() {
            // Reset all inputs
            document.getElementById('deductible').value = '';
            document.getElementById('deductibleMet').value = '';
            document.getElementById('oopMax').value = '';
            document.getElementById('oopMet').value = '';
            document.getElementById('coinsurance').value = '';
            document.getElementById('insurancePortion').value = '';
            
            // Reset all services
            Object.keys(serviceDefaults).forEach(service => {
                const checkbox = document.getElementById(service + '-checkbox');
                const inputs = document.getElementById(service + '-inputs');
                const card = document.getElementById(service + '-card');
                const rate = document.getElementById(service + '-rate');
                const days = document.getElementById(service + '-days');
                
                checkbox.checked = false;
                inputs.style.display = 'none';
                card.classList.remove('selected');
                rate.value = '';
                days.value = serviceDefaults[service].days;
            });
            
            showNoCalculation();
        }

        // Initialize
        showNoCalculation();
    </script>
</body>
</html>
